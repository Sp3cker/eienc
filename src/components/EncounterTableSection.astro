---
import PokemonSprite from './PokemonSprite.astro'
import { getSpeciesIdFromLabel } from '../utils/encounterUtils/pokemonEncounterProcessor'
import { getSpeciesName } from '../utils/speciesData'
import type { EncounterData } from '../types/encounterTypes'

export interface Props {
  encounters: EncounterData[]
  method: string
  title: string
  headerClass?: string
}

const { encounters, method, title, headerClass = '' } = Astro.props
const filtered = encounters.filter((encounter) => encounter.method === method)

const getlevelRange = (minLevel: number, maxLevel: number) =>
  `${minLevel} â€“ ${maxLevel}`

const formatEncounterRate = (encounterRate?: number) => {
  return(encounterRate ? `${encounterRate}%` : '')
}
---

<div class="relative min-w-[25%] overflow-hidden rounded-md border-2">
  <table class="w-full table-auto">
    <thead>
      <tr class={headerClass}>
        <th class="px-4 py-1 text-center font-pixeloperator8 text-xs">{title}</th>
      </tr>
    </thead>
    <tbody>
      {
        filtered.length !== 0 &&
          filtered.map((encounter) => {
            const speciesName = getSpeciesName(
              getSpeciesIdFromLabel(encounter.species)
            )
            const levelRange = getlevelRange(
              encounter.min_level,
              encounter.max_level
            )
            const encounterRate = formatEncounterRate(encounter.encounterRate)
            return (
              <tr class="bg-white last:border-0 even:bg-gray-300">
                <td class="items-center gap-1 py-0.5 pl-1">
                  <div class="flex gap-1">
                    <PokemonSprite
                      speciesId={getSpeciesIdFromLabel(encounter.species)}
                    />
                    <span class="flex flex-col">
                      <span class="font-pixeloperator font-bold text-xs">
                        {speciesName}
                      </span>
                      <span class="flex gap-2">
                        <span class="flex items-center justify-center rounded-full text-xs font-pixeloperatormono text-neutral-900 ">
                          {levelRange}
                        </span>
                        <span class="flex items-center justify-center rounded-full text-xs font-bold text-green-600 italic">
                          {encounterRate}
                        </span>
                      </span>
                    </span>
                  </div>
                </td>
              </tr>
            )
          })
      }
      {
        filtered.length === 0 && (
          <tr class="h-full">
            <div class="absolute top-1/2 flex w-full -translate-y-1/2 justify-center px-1 py-2 text-center text-sm text-gray-500">
              <span class="margin-x-auto font-pixelify text-lg text-wrap italic">Not avaialble in this area</span>
            </div>
          </tr>
        )
      }
    </tbody>
  </table>
</div>
